{"version":3,"sources":["../../../src/components/accessibility/keyboard_accessible.test.js"],"names":["describe","consoleStub","beforeEach","stub","console","afterEach","error","restore","test","component","expect","calledOnce","toBe","getCall","args","toContain","called","$button","toMatchSnapshot","onClickHandler","find","simulate","keyCode","ENTER","assert","SPACE"],"mappings":"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","file":"keyboard_accessible.test.js","sourcesContent":["import React from 'react';\nimport {\n  render,\n  shallow,\n} from 'enzyme';\nimport sinon from 'sinon';\n\nimport { KuiKeyboardAccessible } from './keyboard_accessible';\n\nimport { keyCodes } from '../../services';\n\ndescribe('KuiKeyboardAccessible', () => {\n  describe('throws an error', () => {\n    let consoleStub;\n\n    beforeEach(() => {\n      consoleStub = sinon.stub(console, 'error');\n    });\n\n    afterEach(() => {\n      console.error.restore();\n    });\n\n    test(`when there's no child`, () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible />\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `needs to wrap an element with which the user interacts.`\n      );\n    });\n\n    test('when the child is a button', () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <button onClick={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `doesn't need to be used on a button.`\n      );\n    });\n\n    test('when the child is a link with an href', () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <a href=\"#\" onClick={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `doesn't need to be used on a link if it has a href attribute.`\n      );\n    });\n\n    test(`when the child doesn't have an onClick prop`, () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <div />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `needs to wrap an element which has an onClick prop assigned.`\n      );\n    });\n\n    test(`when the child's onClick prop isn't a function`, () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <div onClick=\"notAFunction\" />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `child's onClick prop needs to be a function.`\n      );\n    });\n\n    test(`when the child has an onKeyDown prop`, () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <div onClick={() => {}} onKeyDown={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `child can't have an onKeyDown prop because the implementation will override it.`\n      );\n    });\n\n    test(`when the child has an onKeyUp prop`, () => {\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <div onClick={() => {}} onKeyUp={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.calledOnce).toBe(true);\n      expect(consoleStub.getCall(0).args[0]).toContain(\n        `child can't have an onKeyUp prop because the implementation will override it.`\n      );\n    });\n  });\n\n  describe(`doesn't throw an error`, () => {\n    test('when the element is a link without an href', () => {\n      const consoleStub = sinon.stub(console, 'error');\n      const component = ( // eslint-disable-line no-unused-vars\n        <KuiKeyboardAccessible>\n          <a onClick={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect(consoleStub.called).toBe(false);\n      console.error.restore();\n    });\n  });\n\n  describe('adds accessibility attributes', () => {\n    test('tabindex and role', () => {\n      const $button = render(\n        <KuiKeyboardAccessible>\n          <div onClick={() => {}} />\n        </KuiKeyboardAccessible>\n      );\n\n      expect($button)\n        .toMatchSnapshot();\n    });\n  });\n\n  describe(`doesn't override pre-existing accessibility attributes`, () => {\n    test('tabindex', () => {\n      const $button = render(\n        <KuiKeyboardAccessible>\n          <div onClick={() => {}} tabIndex=\"1\" />\n        </KuiKeyboardAccessible>\n      );\n\n      expect($button)\n        .toMatchSnapshot();\n    });\n\n    test('role', () => {\n      const $button = render(\n        <KuiKeyboardAccessible>\n          <div onClick={() => {}} role=\"submit\" />\n        </KuiKeyboardAccessible>\n      );\n\n      expect($button)\n        .toMatchSnapshot();\n    });\n  });\n\n  describe(`calls onClick`, () => {\n    test(`on ENTER keyup`, () => {\n      const onClickHandler = sinon.stub();\n\n      const $button = shallow(\n        <KuiKeyboardAccessible>\n          <div data-div onClick={onClickHandler} />\n        </KuiKeyboardAccessible>\n      );\n\n      $button.find('[data-div]').simulate('keyup', {\n        keyCode: keyCodes.ENTER\n      });\n\n      sinon.assert.calledOnce(onClickHandler);\n    });\n\n    test(`on SPACE keyup`, () => {\n      const onClickHandler = sinon.stub();\n\n      const $button = shallow(\n        <KuiKeyboardAccessible>\n          <div data-div onClick={onClickHandler} />\n        </KuiKeyboardAccessible>\n      );\n\n      $button.find('[data-div]').simulate('keyup', {\n        keyCode: keyCodes.SPACE\n      });\n\n      sinon.assert.calledOnce(onClickHandler);\n    });\n  });\n});\n"]}