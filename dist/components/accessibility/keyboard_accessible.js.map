{"version":3,"sources":["../../../src/components/accessibility/keyboard_accessible.js"],"names":["KuiKeyboardAccessible","onKeyDown","e","keyCode","SPACE","preventDefault","onKeyUp","ENTER","props","children","onClick","child","tabIndex","role","applyKeyboardAccessibility","keyboardInaccessibleElement","propName","componentName","Error","type","href","undefined","propTypes"],"mappings":";;;;;;;;;;;AAsBA;;AAKA;;;;;;+eA3BA;;;;;;;;;;;;;;;;;;;;;;IA6BaA,qB,WAAAA,qB;;;;;;;;;;;;;;oNACXC,S,GAAY,aAAK;AACf;AACA,UAAIC,EAAEC,OAAF,KAAc,mBAASC,KAA3B,EAAkC;AAChCF,UAAEG,cAAF;AACD;AACF,K,QAEDC,O,GAAU,aAAK;AACb;AACA,UAAIJ,EAAEC,OAAF,KAAc,mBAASI,KAAvB,IAAgCL,EAAEC,OAAF,KAAc,mBAASC,KAA3D,EAAkE;AAChE;AACA,cAAKI,KAAL,CAAWC,QAAX,CAAoBD,KAApB,CAA0BE,OAA1B,CAAkCR,CAAlC;AACD;AACF,K;;;;;+CAE0BS,K,EAAO;AAChC;AACA,UAAMH;AACJI,kBAAU,GADN;AAEJC,cAAM;AAFF,SAGDF,MAAMH,KAHL;AAIJP,mBAAW,KAAKA,SAJZ;AAKJK,iBAAS,KAAKA;AALV,QAAN;;AAQA,aAAO,yBAAaK,KAAb,EAAoBH,KAApB,CAAP;AACD;;;6BAEQ;AACP,aAAO,KAAKM,0BAAL,CAAgC,KAAKN,KAAL,CAAWC,QAA3C,CAAP;AACD;;;;;;AAGH,IAAMM,8BAA8B,SAA9BA,2BAA8B,CAACP,KAAD,EAAQQ,QAAR,EAAkBC,aAAlB,EAAoC;AACtE,MAAMN,QAAQH,MAAMC,QAApB;;AAEA,MAAI,CAACE,KAAL,EAAY;AACV,UAAM,IAAIO,KAAJ,CAAaD,aAAb,8DAAN;AACD;;AAED;AACA;AACA,MAAIN,MAAMQ,IAAN,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAID,KAAJ,CAAaD,aAAb,4CAAN;AACD;;AAED,MAAIN,MAAMQ,IAAN,KAAe,GAAf,IAAsBR,MAAMH,KAAN,CAAYY,IAAZ,KAAqBC,SAA/C,EAA0D;AACxD,UAAM,IAAIH,KAAJ,CAAaD,aAAb,qEAAN;AACD;;AAED;AACA,MAAI,CAACN,MAAMH,KAAN,CAAYE,OAAjB,EAA0B;AACxB,UAAM,IAAIQ,KAAJ,CAAaD,aAAb,mEAAN;AACD;;AAED,MAAI,OAAON,MAAMH,KAAN,CAAYE,OAAnB,KAA+B,UAAnC,EAA+C;AAC7C,UAAM,IAAIQ,KAAJ,CAAaD,aAAb,uDAAN;AACD;;AAED,MAAIN,MAAMH,KAAN,CAAYP,SAAhB,EAA2B;AACzB,UAAM,IAAIiB,KAAJ,CAAaD,aAAb,0FAAN;AACD;;AAED,MAAIN,MAAMH,KAAN,CAAYF,OAAhB,EAAyB;AACvB,UAAM,IAAIY,KAAJ,CAAaD,aAAb,wFAAN;AACD;AACF,CAjCD;;AAmCAjB,sBAAsBsB,SAAtB,GAAkC;AAChCb,YAAUM;AADsB,CAAlC","file":"keyboard_accessible.js","sourcesContent":["/**\n * Interactive elements must be able to receive focus.\n *\n * Ideally, this means using elements that are natively keyboard accessible (<a href=\"\">,\n * <input type=\"button\">, or <button>). Note that links should be used when navigating and buttons\n * should be used when performing an action on the page.\n *\n * If, however, you need to use elements that aren't natively keyboard accessible (for example, <div>,\n * <p>, or <a> without the href attribute), then you need to allow them to receive focus and to\n * respond to keyboard input. The workaround is to:\n *\n *   - Give the element tabindex=\"0\" so that it can receive keyboard focus.\n *   - Add a JavaScript onkeyup event handler that triggers element functionality if the Enter key\n *     is pressed while the element is focused. This is necessary because some browsers do not trigger\n *    onclick events for such elements when activated via the keyboard.\n *   - If the item is meant to function as a button, the onkeyup event handler should also detect the\n *     Spacebar in addition to the Enter key, and the element should be given role=\"button\".\n *\n * Wrap any such elements that aren't natively keyboard accessible in this component to automatically\n * apply the above workaround to them.\n */\n\nimport {\n  Component,\n  cloneElement,\n} from 'react';\n\nimport { keyCodes } from '../../services';\n\nexport class KuiKeyboardAccessible extends Component {\n  onKeyDown = e => {\n    // Prevent a scroll from occurring if the user has hit space.\n    if (e.keyCode === keyCodes.SPACE) {\n      e.preventDefault();\n    }\n  }\n\n  onKeyUp = e => {\n    // Support keyboard accessibility by emulating mouse click on ENTER or SPACE keypress.\n    if (e.keyCode === keyCodes.ENTER || e.keyCode === keyCodes.SPACE) {\n      // Delegate to the click handler on the element.\n      this.props.children.props.onClick(e);\n    }\n  }\n\n  applyKeyboardAccessibility(child) {\n    // Add attributes required for accessibility unless they are already specified.\n    const props = {\n      tabIndex: '0',\n      role: 'button',\n      ...child.props,\n      onKeyDown: this.onKeyDown,\n      onKeyUp: this.onKeyUp,\n    };\n\n    return cloneElement(child, props);\n  }\n\n  render() {\n    return this.applyKeyboardAccessibility(this.props.children);\n  }\n}\n\nconst keyboardInaccessibleElement = (props, propName, componentName) => {\n  const child = props.children;\n\n  if (!child) {\n    throw new Error(`${componentName} needs to wrap an element with which the user interacts.`);\n  }\n\n  // The whole point of this component is to hack in functionality that native buttons provide\n  // by default.\n  if (child.type === 'button') {\n    throw new Error(`${componentName} doesn't need to be used on a button.`);\n  }\n\n  if (child.type === 'a' && child.props.href !== undefined) {\n    throw new Error(`${componentName} doesn't need to be used on a link if it has a href attribute.`);\n  }\n\n  // We're emulating a click action, so we should already have a regular click handler defined.\n  if (!child.props.onClick) {\n    throw new Error(`${componentName} needs to wrap an element which has an onClick prop assigned.`);\n  }\n\n  if (typeof child.props.onClick !== 'function') {\n    throw new Error(`${componentName}'s child's onClick prop needs to be a function.`);\n  }\n\n  if (child.props.onKeyDown) {\n    throw new Error(`${componentName}'s child can't have an onKeyDown prop because the implementation will override it.`);\n  }\n\n  if (child.props.onKeyUp) {\n    throw new Error(`${componentName}'s child can't have an onKeyUp prop because the implementation will override it.`);\n  }\n};\n\nKuiKeyboardAccessible.propTypes = {\n  children: keyboardInaccessibleElement,\n};\n"]}