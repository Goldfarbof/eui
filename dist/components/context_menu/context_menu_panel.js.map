{"version":3,"sources":["../../../src/components/context_menu/context_menu_panel.js"],"names":["transitionDirectionAndTypeToClassNameMap","next","in","out","previous","KuiContextMenuPanel","children","className","onClose","title","panelRef","transitionType","transitionDirection","rest","panelTitle","Boolean","hasTransition","classes","propTypes","node","string","func","oneOf"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,2CAA2C;AAC/CC,QAAM;AACJC,QAAI,8BADA;AAEJC,SAAK;AAFD,GADyC;AAK/CC,YAAU;AACRF,QAAI,+BADI;AAERC,SAAK;AAFG;AALqC,CAAjD;;AAWO,IAAME,sBAAsB,SAAtBA,mBAAsB,OAS7B;AAAA,MARJC,QAQI,QARJA,QAQI;AAAA,MAPJC,SAOI,QAPJA,SAOI;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,cAGI,QAHJA,cAGI;AAAA,MAFJC,mBAEI,QAFJA,mBAEI;AAAA,MADDC,IACC;;AACJ,MAAIC,mBAAJ;;AAEA,MAAIL,KAAJ,EAAW;AACT,QAAIM,QAAQP,OAAR,CAAJ,EAAsB;AACpBM,mBACE;AAAA;AAAA;AACE,qBAAU,0BADZ;AAEE,mBAASN;AAFX;AAIE;AAAA;AAAA,YAAM,WAAU,4BAAhB;AACE;AACE,kBAAK,WADP;AAEE,kBAAK,QAFP;AAGE,uBAAU;AAHZ,YADF;AAOGC;AAPH;AAJF,OADF;AAgBD,KAjBD,MAiBO;AACLK,mBACE;AAAA;AAAA;AACE;AAAA;AAAA,YAAM,WAAU,4BAAhB;AACGL;AADH;AADF,OADF;AAOD;AACF;;AAED,MAAMO,gBAAgBJ,uBAAuBD,cAA7C;AACA,MAAMM,UAAU,0BAAW,qBAAX,EAAkCV,SAAlC,EACdS,gBAAgBhB,yCAAyCY,mBAAzC,EAA8DD,cAA9D,CAAhB,GAAgG,EADlF,CAAhB;;AAIA,SACE;AAAA;AAAA;AACE,WAAKD,QADP;AAEE,iBAAWO;AAFb,OAGMJ,IAHN;AAKGC,cALH;AAMGR;AANH,GADF;AAUD,CAxDM;;;AA0DPD,oBAAoBa,SAApB,GAAgC;AAC9BZ,YAAU,oBAAUa,IADU;AAE9BZ,aAAW,oBAAUa,MAFS;AAG9BX,SAAO,oBAAUW,MAHa;AAI9BZ,WAAS,oBAAUa,IAJW;AAK9BX,YAAU,oBAAUW,IALU;AAM9BV,kBAAgB,oBAAUW,KAAV,CAAgB,CAAC,IAAD,EAAO,KAAP,CAAhB,CANc;AAO9BV,uBAAqB,oBAAUU,KAAV,CAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB;AAPS,CAAhC","file":"context_menu_panel.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { KuiIcon, KuiPopoverTitle } from '..';\n\nconst transitionDirectionAndTypeToClassNameMap = {\n  next: {\n    in: 'kuiContextMenuPanel-txInLeft',\n    out: 'kuiContextMenuPanel-txOutLeft',\n  },\n  previous: {\n    in: 'kuiContextMenuPanel-txInRight',\n    out: 'kuiContextMenuPanel-txOutRight',\n  },\n};\n\nexport const KuiContextMenuPanel = ({\n  children,\n  className,\n  onClose,\n  title,\n  panelRef,\n  transitionType,\n  transitionDirection,\n  ...rest,\n}) => {\n  let panelTitle;\n\n  if (title) {\n    if (Boolean(onClose)) {\n      panelTitle = (\n        <button\n          className=\"kuiContextMenuPanelTitle\"\n          onClick={onClose}\n        >\n          <span className=\"kuiContextMenu__itemLayout\">\n            <KuiIcon\n              type=\"arrowLeft\"\n              size=\"medium\"\n              className=\"kuiContextMenu__icon\"\n            />\n\n            {title}\n          </span>\n        </button>\n      );\n    } else {\n      panelTitle = (\n        <KuiPopoverTitle>\n          <span className=\"kuiContextMenu__itemLayout\">\n            {title}\n          </span>\n        </KuiPopoverTitle>\n      );\n    }\n  }\n\n  const hasTransition = transitionDirection && transitionType;\n  const classes = classNames('kuiContextMenuPanel', className, (\n    hasTransition ? transitionDirectionAndTypeToClassNameMap[transitionDirection][transitionType] : ''\n  ));\n\n  return (\n    <div\n      ref={panelRef}\n      className={classes}\n      {...rest}\n    >\n      {panelTitle}\n      {children}\n    </div>\n  );\n};\n\nKuiContextMenuPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string,\n  onClose: PropTypes.func,\n  panelRef: PropTypes.func,\n  transitionType: PropTypes.oneOf(['in', 'out']),\n  transitionDirection: PropTypes.oneOf(['next', 'previous']),\n};\n"]}