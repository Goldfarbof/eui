{"version":3,"sources":["../../../src/components/context_menu/context_menu_item.js"],"names":["KuiContextMenuItem","children","className","hasPanel","icon","rest","iconInstance","arrow","classes","propTypes","node","string","oneOfType","element","onClick","func","bool"],"mappings":";;;;;;;;;;;AAAA;;;;AAGA;;;;AACA;;;;AAEA;;;;;;AAEO,IAAMA,qBAAqB,SAArBA,kBAAqB,OAM5B;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,IAEI,QAFJA,IAEI;AAAA,MADDC,IACC;;AACJ,MAAIC,qBAAJ;;AAEA,MAAIF,IAAJ,EAAU;AACR,mBAAeA,IAAf,yCAAeA,IAAf;AACE,WAAK,QAAL;AACEE,uBACE;AACE,gBAAMF,IADR;AAEE,gBAAK,QAFP;AAGE,qBAAU;AAHZ,UADF;AAOA;;AAEF;AACE;AACAE,uBAAe,yBAAaF,IAAb,EAAmB;AAChCF,qBAAW;AADqB,SAAnB,CAAf;AAbJ;AAiBD;;AAED,MAAIK,cAAJ;;AAEA,MAAIJ,QAAJ,EAAc;AACZI,YACE;AACE,YAAK,YADP;AAEE,YAAK,QAFP;AAGE,iBAAU;AAHZ,MADF;AAOD;;AAED,MAAMC,UAAU,0BAAW,oBAAX,EAAiCN,SAAjC,CAAhB;;AAEA,SACE;AAAA;AAAA;AACE,iBAAWM;AADb,OAEMH,IAFN;AAIE;AAAA;AAAA,QAAM,WAAU,4BAAhB;AACGC,kBADH;AAEE;AAAA;AAAA,UAAM,WAAU,0BAAhB;AACGL;AADH,OAFF;AAKGM;AALH;AAJF,GADF;AAcD,CAzDM;;;AA2DPP,mBAAmBS,SAAnB,GAA+B;AAC7BR,YAAU,oBAAUS,IADS;AAE7BR,aAAW,oBAAUS,MAFQ;AAG7BP,QAAM,oBAAUQ,SAAV,CAAoB,CAAC,oBAAUC,OAAX,EAAoB,oBAAUF,MAA9B,CAApB,CAHuB;AAI7BG,WAAS,oBAAUC,IAJU;AAK7BZ,YAAU,oBAAUa;AALS,CAA/B","file":"context_menu_item.js","sourcesContent":["import React, {\n  cloneElement,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { KuiIcon } from '..';\n\nexport const KuiContextMenuItem = ({\n  children,\n  className,\n  hasPanel,\n  icon,\n  ...rest,\n}) => {\n  let iconInstance;\n\n  if (icon) {\n    switch (typeof icon) {\n      case 'string':\n        iconInstance = (\n          <KuiIcon\n            type={icon}\n            size=\"medium\"\n            className=\"kuiContextMenu__icon\"\n          />\n        );\n        break;\n\n      default:\n        // Assume it's already an instance of an icon.\n        iconInstance = cloneElement(icon, {\n          className: 'kuiContextMenu__icon'\n        });\n    }\n  }\n\n  let arrow;\n\n  if (hasPanel) {\n    arrow = (\n      <KuiIcon\n        type=\"arrowRight\"\n        size=\"medium\"\n        className=\"kuiContextMenu__arrow\"\n      />\n    );\n  }\n\n  const classes = classNames('kuiContextMenuItem', className);\n\n  return (\n    <button\n      className={classes}\n      {...rest}\n    >\n      <span className=\"kuiContextMenu__itemLayout\">\n        {iconInstance}\n        <span className=\"kuiContextMenuItem__text\">\n          {children}\n        </span>\n        {arrow}\n      </span>\n    </button>\n  );\n};\n\nKuiContextMenuItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n  onClick: PropTypes.func,\n  hasPanel: PropTypes.bool,\n};\n"]}